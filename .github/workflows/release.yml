name: Workflow for creating a release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  pyinstaller:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      # Get the 'GIT_TAG_NAME' env var.
      - uses: olegtarasov/get-tag@v2

      - name: Set up Python
        uses: actions/setup-python@master
        with:
          # PyInstaller does not yet support 3.8, https://github.com/pyinstaller/pyinstaller/issues/4311
          python-version: 3.7

      - name: Install Python requirements
        run: pip install pyinstaller -r requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller minegauler.spec

      - name: Compress (*nix)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
        run: tar -C dist -czvf minegauler-${{ matrix.os }}.tgz minegauler

      - name: Compress (Windows)
        if: matrix.os == 'windows-latest'
        run: tar.exe -C dist -acvf minegauler-${{ matrix.os }}.zip minegauler

      - name: Store artefacts
        uses: actions/upload-artifact@v2
        with:
          name: minegauler-${{ env.GIT_TAG_NAME }}-${{ matrix.os }}
          path: minegauler-${{ matrix.os }}.*

  create-release:
    name: Create release in GitHub
    needs: pyinstaller
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Get the 'GIT_TAG_NAME' env var.
      - uses: olegtarasov/get-tag@v2

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this release
            - First change
            - Second change
          draft: true
          prerelease: false

      - name: Fetch artefacts
        uses: actions/download-artifact@v2

      - uses: mxschmitt/action-tmate@v2

      - name: Upload release asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTEFACT_NAME: minegauler-${{ env.GIT_TAG_NAME }}-ubuntu-latest
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ARTEFACT_NAME }}/${{ env.ARTEFACT_NAME }}.tgz
          asset_name: minegauler-${{ env.GIT_TAG_NAME }}-linux.tgz
          asset_content_type: application/gzip

      - name: Upload release asset (MacOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTEFACT_NAME: minegauler-${{ env.GIT_TAG_NAME }}-macOS-latest
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ARTEFACT_NAME }}/${{ env.ARTEFACT_NAME }}.tgz
          asset_name: minegauler-${{ env.GIT_TAG_NAME }}-mac.tgz
          asset_content_type: application/gzip

      - name: Upload release asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTEFACT_NAME: minegauler-${{ env.GIT_TAG_NAME }}-windows-latest
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ARTEFACT_NAME }}/${{ env.ARTEFACT_NAME }}.zip
          asset_name: minegauler-${{ env.GIT_TAG_NAME }}-windows.zip
          asset_content_type: application/zip

  cleanup:
    name: Clean up at the end of the workflow
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    steps:
      - uses: olegtarasov/get-tag@v2
      - name: Delete artefacts shared between jobs
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            minegauler-${{ env.GIT_TAG_NAME }}-ubuntu-latest
            minegauler-${{ env.GIT_TAG_NAME }}-macOS-latest
            minegauler-${{ env.GIT_TAG_NAME }}-windows-latest
          failOnError: false
